// Code generated by MockGen. DO NOT EDIT.
// Source: G:\dev_projects\GameSparks\backend-microservices\ProfileService\internal\usecases\interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	entity "ProfileService/internal/entity"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProfileService is a mock of ProfileService interface.
type MockProfileService struct {
	ctrl     *gomock.Controller
	recorder *MockProfileServiceMockRecorder
}

// MockProfileServiceMockRecorder is the mock recorder for MockProfileService.
type MockProfileServiceMockRecorder struct {
	mock *MockProfileService
}

// NewMockProfileService creates a new mock instance.
func NewMockProfileService(ctrl *gomock.Controller) *MockProfileService {
	mock := &MockProfileService{ctrl: ctrl}
	mock.recorder = &MockProfileServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProfileService) EXPECT() *MockProfileServiceMockRecorder {
	return m.recorder
}

// EditAvatarProfile mocks base method.
func (m *MockProfileService) EditAvatarProfile(ctx context.Context, user *entity.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditAvatarProfile", ctx, user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditAvatarProfile indicates an expected call of EditAvatarProfile.
func (mr *MockProfileServiceMockRecorder) EditAvatarProfile(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditAvatarProfile", reflect.TypeOf((*MockProfileService)(nil).EditAvatarProfile), ctx, user)
}

// EditProfile mocks base method.
func (m *MockProfileService) EditProfile(ctx context.Context, profile *entity.FullProfile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditProfile", ctx, profile)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditProfile indicates an expected call of EditProfile.
func (mr *MockProfileServiceMockRecorder) EditProfile(ctx, profile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditProfile", reflect.TypeOf((*MockProfileService)(nil).EditProfile), ctx, profile)
}

// GetAvatarProfile mocks base method.
func (m *MockProfileService) GetAvatarProfile(ctx context.Context, id string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvatarProfile", ctx, id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvatarProfile indicates an expected call of GetAvatarProfile.
func (mr *MockProfileServiceMockRecorder) GetAvatarProfile(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvatarProfile", reflect.TypeOf((*MockProfileService)(nil).GetAvatarProfile), ctx, id)
}

// GetProfile mocks base method.
func (m *MockProfileService) GetProfile(ctx context.Context, id string) (*entity.FullProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfile", ctx, id)
	ret0, _ := ret[0].(*entity.FullProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfile indicates an expected call of GetProfile.
func (mr *MockProfileServiceMockRecorder) GetProfile(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockProfileService)(nil).GetProfile), ctx, id)
}

// GetProfileStats mocks base method.
func (m *MockProfileService) GetProfileStats(ctx context.Context, id string) (*entity.UserStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileStats", ctx, id)
	ret0, _ := ret[0].(*entity.UserStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfileStats indicates an expected call of GetProfileStats.
func (mr *MockProfileServiceMockRecorder) GetProfileStats(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileStats", reflect.TypeOf((*MockProfileService)(nil).GetProfileStats), ctx, id)
}

// GetStreamKey mocks base method.
func (m *MockProfileService) GetStreamKey(ctx context.Context, id string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStreamKey", ctx, id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStreamKey indicates an expected call of GetStreamKey.
func (mr *MockProfileServiceMockRecorder) GetStreamKey(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStreamKey", reflect.TypeOf((*MockProfileService)(nil).GetStreamKey), ctx, id)
}

// ModifyElo mocks base method.
func (m *MockProfileService) ModifyElo(ctx context.Context, elomodify *entity.UserModifyELO) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyElo", ctx, elomodify)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyElo indicates an expected call of ModifyElo.
func (mr *MockProfileServiceMockRecorder) ModifyElo(ctx, elomodify interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyElo", reflect.TypeOf((*MockProfileService)(nil).ModifyElo), ctx, elomodify)
}

// RandomStreamKey mocks base method.
func (m *MockProfileService) RandomStreamKey(ctx context.Context, id string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RandomStreamKey", ctx, id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RandomStreamKey indicates an expected call of RandomStreamKey.
func (mr *MockProfileServiceMockRecorder) RandomStreamKey(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RandomStreamKey", reflect.TypeOf((*MockProfileService)(nil).RandomStreamKey), ctx, id)
}

// SetAdmin mocks base method.
func (m *MockProfileService) SetAdmin(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAdmin", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAdmin indicates an expected call of SetAdmin.
func (mr *MockProfileServiceMockRecorder) SetAdmin(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAdmin", reflect.TypeOf((*MockProfileService)(nil).SetAdmin), ctx, id)
}

// UnsetAdmin mocks base method.
func (m *MockProfileService) UnsetAdmin(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnsetAdmin", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnsetAdmin indicates an expected call of UnsetAdmin.
func (mr *MockProfileServiceMockRecorder) UnsetAdmin(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsetAdmin", reflect.TypeOf((*MockProfileService)(nil).UnsetAdmin), ctx, id)
}
