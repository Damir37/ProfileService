// Code generated by MockGen. DO NOT EDIT.
// Source: G:\dev_projects\GameSparks\backend-microservices\ProfileService\internal\usecases\interfaces.go

// Package mocks is a generated GoMock package.
package unit

import (
	entity "ProfileService/internal/entity"
	"ProfileService/test/mocks"
	context "context"
	reflect "reflect"
	"testing"

	gomock "github.com/golang/mock/gomock"
)

func TestNewMockProfileService(t *testing.T) {
	type args struct {
		ctrl *gomock.Controller
	}
	tests := []struct {
		name string
		args args
		want *mocks.MockProfileService
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := mocks.NewMockProfileService(tt.args.ctrl); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("NewMockProfileService() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMockProfileService_EXPECT(t *testing.T) {
	tests := []struct {
		name string
		m    *mocks.MockProfileService
		want *mocks.MockProfileServiceMockRecorder
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.m.EXPECT(); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("MockProfileService.EXPECT() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMockProfileService_EditAvatarProfile(t *testing.T) {
	type args struct {
		ctx  context.Context
		user *entity.User
	}
	tests := []struct {
		name    string
		m       *mocks.MockProfileService
		args    args
		want    string
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tt.m.EditAvatarProfile(tt.args.ctx, tt.args.user)
			if (err != nil) != tt.wantErr {
				t.Errorf("MockProfileService.EditAvatarProfile() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if got != tt.want {
				t.Errorf("MockProfileService.EditAvatarProfile() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMockProfileServiceMockRecorder_EditAvatarProfile(t *testing.T) {
	type args struct {
		ctx  interface{}
		user interface{}
	}
	tests := []struct {
		name string
		mr   *mocks.MockProfileServiceMockRecorder
		args args
		want *gomock.Call
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.mr.EditAvatarProfile(tt.args.ctx, tt.args.user); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("MockProfileServiceMockRecorder.EditAvatarProfile() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMockProfileService_EditProfile(t *testing.T) {
	type args struct {
		ctx     context.Context
		profile *entity.FullProfile
	}
	tests := []struct {
		name    string
		m       *mocks.MockProfileService
		args    args
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if err := tt.m.EditProfile(tt.args.ctx, tt.args.profile); (err != nil) != tt.wantErr {
				t.Errorf("MockProfileService.EditProfile() error = %v, wantErr %v", err, tt.wantErr)
			}
		})
	}
}

func TestMockProfileServiceMockRecorder_EditProfile(t *testing.T) {
	type args struct {
		ctx     interface{}
		profile interface{}
	}
	tests := []struct {
		name string
		mr   *mocks.MockProfileServiceMockRecorder
		args args
		want *gomock.Call
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.mr.EditProfile(tt.args.ctx, tt.args.profile); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("MockProfileServiceMockRecorder.EditProfile() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMockProfileService_GetAvatarProfile(t *testing.T) {
	type args struct {
		ctx context.Context
		id  string
	}
	tests := []struct {
		name    string
		m       *mocks.MockProfileService
		args    args
		want    string
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tt.m.GetAvatarProfile(tt.args.ctx, tt.args.id)
			if (err != nil) != tt.wantErr {
				t.Errorf("MockProfileService.GetAvatarProfile() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if got != tt.want {
				t.Errorf("MockProfileService.GetAvatarProfile() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMockProfileServiceMockRecorder_GetAvatarProfile(t *testing.T) {
	type args struct {
		ctx interface{}
		id  interface{}
	}
	tests := []struct {
		name string
		mr   *mocks.MockProfileServiceMockRecorder
		args args
		want *gomock.Call
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.mr.GetAvatarProfile(tt.args.ctx, tt.args.id); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("MockProfileServiceMockRecorder.GetAvatarProfile() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMockProfileService_GetProfile(t *testing.T) {
	type args struct {
		ctx context.Context
		id  string
	}
	tests := []struct {
		name    string
		m       *mocks.MockProfileService
		args    args
		want    *entity.FullProfile
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tt.m.GetProfile(tt.args.ctx, tt.args.id)
			if (err != nil) != tt.wantErr {
				t.Errorf("MockProfileService.GetProfile() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("MockProfileService.GetProfile() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMockProfileServiceMockRecorder_GetProfile(t *testing.T) {
	type args struct {
		ctx interface{}
		id  interface{}
	}
	tests := []struct {
		name string
		mr   *mocks.MockProfileServiceMockRecorder
		args args
		want *gomock.Call
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.mr.GetProfile(tt.args.ctx, tt.args.id); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("MockProfileServiceMockRecorder.GetProfile() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMockProfileService_GetProfileStats(t *testing.T) {
	type args struct {
		ctx context.Context
		id  string
	}
	tests := []struct {
		name    string
		m       *mocks.MockProfileService
		args    args
		want    *entity.UserStats
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tt.m.GetProfileStats(tt.args.ctx, tt.args.id)
			if (err != nil) != tt.wantErr {
				t.Errorf("MockProfileService.GetProfileStats() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("MockProfileService.GetProfileStats() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMockProfileServiceMockRecorder_GetProfileStats(t *testing.T) {
	type args struct {
		ctx interface{}
		id  interface{}
	}
	tests := []struct {
		name string
		mr   *mocks.MockProfileServiceMockRecorder
		args args
		want *gomock.Call
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.mr.GetProfileStats(tt.args.ctx, tt.args.id); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("MockProfileServiceMockRecorder.GetProfileStats() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMockProfileService_GetStreamKey(t *testing.T) {
	type args struct {
		ctx context.Context
		id  string
	}
	tests := []struct {
		name    string
		m       *mocks.MockProfileService
		args    args
		want    string
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tt.m.GetStreamKey(tt.args.ctx, tt.args.id)
			if (err != nil) != tt.wantErr {
				t.Errorf("MockProfileService.GetStreamKey() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if got != tt.want {
				t.Errorf("MockProfileService.GetStreamKey() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMockProfileServiceMockRecorder_GetStreamKey(t *testing.T) {
	type args struct {
		ctx interface{}
		id  interface{}
	}
	tests := []struct {
		name string
		mr   *mocks.MockProfileServiceMockRecorder
		args args
		want *gomock.Call
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.mr.GetStreamKey(tt.args.ctx, tt.args.id); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("MockProfileServiceMockRecorder.GetStreamKey() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMockProfileService_ModifyElo(t *testing.T) {
	type args struct {
		ctx       context.Context
		elomodify *entity.UserModifyELO
	}
	tests := []struct {
		name    string
		m       *mocks.MockProfileService
		args    args
		want    int
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tt.m.ModifyElo(tt.args.ctx, tt.args.elomodify)
			if (err != nil) != tt.wantErr {
				t.Errorf("MockProfileService.ModifyElo() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if got != tt.want {
				t.Errorf("MockProfileService.ModifyElo() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMockProfileServiceMockRecorder_ModifyElo(t *testing.T) {
	type args struct {
		ctx       interface{}
		elomodify interface{}
	}
	tests := []struct {
		name string
		mr   *mocks.MockProfileServiceMockRecorder
		args args
		want *gomock.Call
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.mr.ModifyElo(tt.args.ctx, tt.args.elomodify); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("MockProfileServiceMockRecorder.ModifyElo() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMockProfileService_RandomStreamKey(t *testing.T) {
	type args struct {
		ctx context.Context
		id  string
	}
	tests := []struct {
		name    string
		m       *mocks.MockProfileService
		args    args
		want    string
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tt.m.RandomStreamKey(tt.args.ctx, tt.args.id)
			if (err != nil) != tt.wantErr {
				t.Errorf("MockProfileService.RandomStreamKey() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if got != tt.want {
				t.Errorf("MockProfileService.RandomStreamKey() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMockProfileServiceMockRecorder_RandomStreamKey(t *testing.T) {
	type args struct {
		ctx interface{}
		id  interface{}
	}
	tests := []struct {
		name string
		mr   *mocks.MockProfileServiceMockRecorder
		args args
		want *gomock.Call
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.mr.RandomStreamKey(tt.args.ctx, tt.args.id); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("MockProfileServiceMockRecorder.RandomStreamKey() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMockProfileService_SetAdmin(t *testing.T) {
	type args struct {
		ctx context.Context
		id  string
	}
	tests := []struct {
		name    string
		m       *mocks.MockProfileService
		args    args
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if err := tt.m.SetAdmin(tt.args.ctx, tt.args.id); (err != nil) != tt.wantErr {
				t.Errorf("MockProfileService.SetAdmin() error = %v, wantErr %v", err, tt.wantErr)
			}
		})
	}
}

func TestMockProfileServiceMockRecorder_SetAdmin(t *testing.T) {
	type args struct {
		ctx interface{}
		id  interface{}
	}
	tests := []struct {
		name string
		mr   *mocks.MockProfileServiceMockRecorder
		args args
		want *gomock.Call
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.mr.SetAdmin(tt.args.ctx, tt.args.id); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("MockProfileServiceMockRecorder.SetAdmin() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMockProfileService_UnsetAdmin(t *testing.T) {
	type args struct {
		ctx context.Context
		id  string
	}
	tests := []struct {
		name    string
		m       *mocks.MockProfileService
		args    args
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if err := tt.m.UnsetAdmin(tt.args.ctx, tt.args.id); (err != nil) != tt.wantErr {
				t.Errorf("MockProfileService.UnsetAdmin() error = %v, wantErr %v", err, tt.wantErr)
			}
		})
	}
}

func TestMockProfileServiceMockRecorder_UnsetAdmin(t *testing.T) {
	type args struct {
		ctx interface{}
		id  interface{}
	}
	tests := []struct {
		name string
		mr   *mocks.MockProfileServiceMockRecorder
		args args
		want *gomock.Call
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.mr.UnsetAdmin(tt.args.ctx, tt.args.id); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("MockProfileServiceMockRecorder.UnsetAdmin() = %v, want %v", got, tt.want)
			}
		})
	}
}
